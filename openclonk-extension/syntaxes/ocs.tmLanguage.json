{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.oc-script",
	"name": "OpenClonk",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#module"
		},
		{
			"include": "#toplevelassignment"
		},
		{
			"include": "#func_def"
		},
		{
			"include": "#funcclosure"
		}
	],
	"repository": {
		"func_prop": {
			"name": "meta.function",
			"begin": "(func)",
			"beginCaptures": {
				"1": {
					"name": "storage.type"
				}
			},
			"contentName": "ocs.proplist.function",
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#params"
				},
				{
					"include": "#funcclosure"
				}
			]
		},
		"func_def": {
			"name": "meta.function",
			"begin": "(global\\s|public\\s|protected\\s|private\\s)?\\s*(func)\\s+([a-zA-Z][\\w_]*)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier"
				},
				"2": {
					"name": "storage.type"
				},
				"3": {
					"name": "entity.name.function"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#params"
				},
				{
					"include": "#funcclosure"
				}
			]
		},
		"funcclosure": {
			"begin": "(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.closure.begin"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.closure.end"
				}
			},
			"contentName": "meta.function",
			"end": "(\\})",
			"patterns": [
				{
					"include": "#funcbody"
				}
			]
		},
		"params": {
			"name": "punctuation",
			"begin": "\\(",
			"end": "\\)",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#typedparam"
				},
				{
					"match": "\\s*,\\s*",
					"name": "punctuation"
				},
				{
					"match": "(\\.\\.\\.)",
					"name": "keyword.operator.rest"
				}
			]
		},
		"typedparam": {
			"match": "(int|proplist|object|string|array|bool|any|dev|effect){1}\\s+([a-zA-Z]\\w*)",
			"captures": {
				"1": {
					"name": "entity.name.type"
				},
				"2": {
					"name": "variable.parameter"
				}
			}
		},
		"funcbody": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "funcclosure"
				},
				{
					"include": "#varexpr"
				},
				{
					"include": "#statements"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#linecomment"
				},
				{
					"include": "#blockcomment"
				}
			]
		},
		"toplevelassignment": {
			"begin": "(static(\\s+const)?|local)(\\s+[_a-zA-Z][\\w_]*)(\\s*=?)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type"
				},
				"3": {
					"name": "variable.name"
				}
			},
			"end": "(;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.semicolon"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#expression"
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"include": "#control_structure"
				},
				{
					"include": "#returnstatement"
				},
				{
					"include": "#methodstatement"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#new_proplist"
				},
				{
					"include": "#proplist"
				},
				{
					"include": "#methodexpr"
				},
				{
					"include": "#array"
				},
				{
					"include": "variable"
				}
			]
		},
		"methodstatement": {
			"begin": "([a-zA-Z_][\\w_]*)\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function"
				}
			},
			"end": "\\)\\s*;",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"methodexpr": {
			"begin": "([a-zA-Z_][\\w_]*)\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"name": "punctuation.arguments.separator",
					"match": ","
				},
				{
					"include": "#expression"
				}
			]
		},
		"varexpr": {
			"begin": "(var)\\s+([a-zA-Z_][\\w_]*)(\\s*=)?",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type"
				},
				"2": {
					"name": "variable.name"
				}
			},
			"end": ";",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"numbers": {
			"name": "constant.numeric",
			"match": "[0-9]+"
		},
		"declarations": {
			"name": "entity.name.type",
			"match": "(var|const|static|local)"
		},
		"constant": {
			"name": "constant.language",
			"match": "\\b(true|false|nil)\\b"
		},
		"functions": {
			"name": "constant.language",
			"match": "(public|global|protected|private|func)"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ocs",
					"match": "\\b(break|continue|return|else)\\b"
				},
				{
					"name": "constant.language.ocs",
					"match": "(in)"
				},
				{
					"name": "constant.language.ocs",
					"match": "(this)"
				}
			]
		},
		"variable": {
			"disabled": 0,
			"match": "([a-zA-Z][\\w_]*)",
			"name": "variable.name"
		},
		"new_proplist": {
			"begin": "(new)\\s+([a-zA-Z][\\w_]*)",
			"beginCaptures": {
				"1": {
					"name": "constant.language"
				},
				"2": {
					"name": "entity.name.class"
				}
			},
			"contentName": "entity.name.section.proplist",
			"patterns": [
				{
					"include": "#proplist"
				}
			],
			"end": "(?<=\\})"
		},
		"proplist": {
			"begin": "(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.proplist.begin"
				}
			},
			"contentName": "entity.proplist",
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punction.definition.proplist.end"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#propertydef"
				}
			]
		},
		"propertydef": {
			"begin": "([a-zA-Z_][\\w_]*)\\s*=",
			"beginCaptures": {
				"1": {
					"name": "variable.name"
				}
			},
			"end": "(?:\\}|,)",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#func_prop"
				},
				{
					"include": "#expression"
				}
			]
		},
		"control_structure": {
			"begin": "(if|while|for)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": "(?<=;|\\})",
			"contentName": "meta.branch",
			"patterns": [
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings"
						},
						{
							"include": "funcclosure"
						},
						{
							"include": "#varexpr"
						},
						{
							"include": "#methodexpr"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"include": "#funcclosure"
				},
				{
					"include": "#statements"
				}
			]
		},
		"returnstatement": {
			"begin": "(return)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": ";",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#expression"
				}
			]
		},
		"whilestatement": {},
		"strings": {
			"name": "string.quoted.double.ocs",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ocs",
					"match": "\\\\."
				}
			]
		},
		"array": {
			"name": "language.array",
			"begin": "(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.array.beginning"
				}
			},
			"contentName": "meta.array",
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.array.end"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"name": "punctuation.array.separator",
					"match": ","
				},
				{
					"include": "#expression"
				}
			]
		},
		"blockcomment": {
			"name": "comment.block",
			"begin": "/\\*",
			"end": "\\*/"
		},
		"linecomment": {
			"name": "comment.line.double-dash",
			"begin": "//",
			"end": "$"
		},
		"module": {
			"name": "keyword.control",
			"match": "(#appendto|#include)"
		},
		"operators": {
			"name": "keyword.operator",
			"match": "(++|--|~|!|+|-|\\*\\*|/|\\*|%|<<|>>|<|<=|>|>=|==|!=|&|\\^|&&|\\?\\?|\\|\\||\\*=|/=|%=|+=|-=|=)"
		}
	}
}